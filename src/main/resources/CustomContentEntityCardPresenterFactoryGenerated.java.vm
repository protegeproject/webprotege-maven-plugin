#* @vtlvariable name="importedPackages" type="java.util.Collection<java.lang.String>" *#
#* @vtlvariable name="desc" type="edu.stanford.webprotege.maven.EntityCardPresenterClassDescriptor" *#

package edu.stanford.bmir.protege.web.client.card;

import com.google.gwt.core.client.GWT;
import edu.stanford.bmir.protege.web.client.card.CustomContentEntityCardPresenterFactory;
import edu.stanford.bmir.protege.web.shared.card.CustomContentId;
import edu.stanford.bmir.protege.web.shared.card.CustomContentDescriptor;
import edu.stanford.bmir.protege.web.shared.card.CardId;

import java.util.HashMap;
import java.util.Map;

import java.util.Optional;
import javax.inject.Provider;
import edu.stanford.bmir.protege.web.client.card.CustomContentEntityCardPresenter;
import edu.stanford.bmir.protege.web.client.card.EntityCardPresenter;

import javax.inject.Inject;

import static com.google.common.base.Preconditions.checkNotNull;
import java.util.List;
import java.util.ArrayList;


#foreach($pkg in $importedPackages)
import $pkg.*;
#end

/**
 * This source file is automatically generated by the WebProtege Maven Plugin.
 *
 * This factory is capable of instantiating the following card content presenters
 *
 *  #foreach($desc in $descriptors)
 *      $desc.canonicalClassName
 *  #end
 *
 */
public class CustomContentEntityCardPresenterFactoryGenerated implements CustomContentEntityCardPresenterFactory {

    private final Map<CustomContentId, Provider<? extends EntityCardPresenter>> id2ProviderMap = new HashMap<>();


    @Inject
    public CustomContentEntityCardPresenterFactoryGenerated(
        #foreach($desc in $descriptors)
                Provider<$desc.simpleName> providerOf_$desc.simpleName#if( $foreach.hasNext ),
        #else

        #end
        #end
    ) {
        #foreach($desc in $descriptors)

            // $desc.canonicalClassName
            addPresenter(
                    CustomContentDescriptor.create(
                            CustomContentId.valueOf("$desc.getCardContentId()")
                    ),
                    providerOf_$desc.getSimpleName());

        #end
    }

    private void addPresenter(CustomContentDescriptor descriptor, Provider<? extends EntityCardPresenter> provider) {
        id2ProviderMap.put(descriptor.getCustomContentId(), provider);
    }


    public Optional<EntityCardPresenter> create(CardId cardId, CustomContentId customContentId) {
        checkNotNull(customContentId);
        Provider<? extends EntityCardPresenter> provider = id2ProviderMap.get(customContentId);
        if (provider == null) {
            return Optional.empty();
        }
        else {
            EntityCardPresenter presenter = provider.get();
            return Optional.of(presenter);
        }
    }
}
